{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Data.table\"\nauthor: \"Anukriti Gupta\"\ndate: \"December 5, 2018\"\noutput:\n  html_document: default\n  \n  \nruntime: shiny\n---\n\n# data.table simple codes\n\n\n> Data- simple operation \n\n```{r setup , echo=FALSE, warning=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(data.table)\n\ncats <- data.table(\n  `Member` = c( rep(\"A\",3), rep(\"B\",2)), \t`Complaints` = c(\"Griev\",\"Prov\",\"IVR\",\"Prov\",\"IVR\"), \n  alpha = seq(0,0.9,by = 0.1)\n)\nknitr::kable(cats,\n              caption=\"testing\"\n      ,format.args = list(big.mark=\",\",decimal.mark=\".\")) # for decimal and comma )\n\n\n\nggplot(cats[,.(Obs = .N, alpha = sum(alpha, na.rm = T)),.(Complaints)], \n       aes(x=Complaints,y = alpha, fill = Complaints)) +     labs(x = \"Complaints\", \n      y = \"% Members\",   \n        title = \"%Complaints by Visit Segment\") + \n  scale_y_continuous(label = function(x) paste0(round(x*100),\"%\")) + \n  geom_label(aes(label = paste0(alpha*100,\"%\")), vjust = 0) + \n geom_bar(stat= \"identity\")   + \n    theme(legend.position=\"none\",\n        legend.title=element_blank(),\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        text=element_text(size=8))\n\n```\n\n`Note`: with \".\" - required to use brackets\n\n### For summarizing at group by level\n\n```{r cars, collapse=TRUE}\n\ncats[,uniqueN(Complaints),.(Member)]\ncats[,uniqueN(Complaints),Member]\ncats[,uniqueN(Complaints),\"Member\"]\ncats[,uniqueN(Complaints),Member]\ncats[, .(N=uniqueN(Complaints)),Member]\n\n```\n\n### For summarizing data and merge with base data \n\n```{r pressure}\n\ncats[,N:=uniqueN(Complaints),Member]\ncats\ncats[,`:=` (N=uniqueN(Complaints)),Member]\ncats\ncat1 <- cats[, .(N=uniqueN(Complaints), Complaints),Member]\ncat1\ncat1[, lapply(.SD, sum),by = \"Member\",.SDcols =c(2)]\n\n\n```\n\n# Rmarkdown Notes: \n\n* writing style \n\n    `A`: Box (``)\n\n    *A*: Italic (**)\n \n    $A$: Italic and different style (within dollar symbol)\n \n    **A**: Bold (** **)\n \n* echo= F for no print of code\n* render(.Rmd)/Ctrl+Shift+K  - for running the code\n* Ctrl+Alt+I - for new chunk\n\n# Git \n\n* git add \"file name\"\n* git reset \"filename\"\"\n* git rm \"filename\" -f\n* git add . git add *.R git add *.html\n* update .gitignore - whenever you want to ignore any folder or file from tracking\n* git add 1.R 2.R 3.html\n* list.files(\"../\") - for going one folder up\n* git add -f \"filename\" -- force addition \n* Undo got add \n  + git reset filename.txt\n** when .gitignore doesnt work \n* git rm -r --cached .\n* git add .\n* git commit -m \"fixed untracked files\"\n* git config --global user.name \"Sam Smith\"\n* git config --global user.email sam@example.com\n#setting done to define which branch to push - matching for all... simple for current branch\n* git config --global push.default simple\n* creating ssh key\n<https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent>\n\n\n\n<https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html>\n```{r}\n\n\n\n```\n\n### Documents: \n<https://jennybc.github.io/2014-05-12-ubc/ubc-r/session03_git.html>\n\n<https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf>\n\n<https://rmarkdown.rstudio.com/lesson-1.html>\n\n<https://r4ds.had.co.nz/exploratory-data-analysis.html>\n<http://data.agaric.com/undo-git-add-remove-files-staged-git-commit>\n\n\n```{r, echo = FALSE}\nlibrary(shiny)\nnumericInput(\"n\",\n\"How many cars?\", 5)\nrenderTable({\nhead(cars, input$n)\n})\n\n\n```\n\n```{r shiny app }\n\nlibrary(shiny)\ndata(iris)\n\n# First need to define ui and server \nui <- fluidPage(\n  titlePanel(\"Hi! This is just begining\")\n)\n\nserver <- function(input, output, session) {}\n\n# to run the application\nshinyApp(\n  ui = ui,\n  server = server\n)\n\n#Layout\n\nui <- fluidPage(\n  titlePanel(\"Side bar layout!\"),\n    sidebarLayout(\n      sidebarPanel(p(\"This is the sidebar panel\")),\n      mainPanel(p(\"This is the main panel\"))\n    )\n  )\n\nshinyApp(ui = ui, server = server)\n\n\nui <- fluidPage(\n  titlePanel(\"My Shiny App\"),\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(inputId = 'x', label = \"X Variable\", choices = names(iris)),\n        radioButtons(inputId = 'y', label = \"Y Variable\", choices = names(iris), inline = FALSE)\n      ),\n      mainPanel(p(\"This is the main panel\"))\n    )\n  )\nshinyApp(ui = ui, server = server)\n\n\n\nlibrary(ggplot2)\nui <- fluidPage(\n    titlePanel(\"My Shiny App\"),\n  sidebarLayout(\n      sidebarPanel(\n        selectInput(inputId = 'x', label = \"X Variable\", choices = names(iris)),\n        radioButtons(inputId = 'y', label = \"Y Variable\", choices = names(iris), inline = FALSE)\n      ),\n      mainPanel(\n        plotOutput(outputId = 'plot')\n      )\n    )\n  )\nserver = function(input, output, session) {\n  output$plot <- renderPlot({\n    ggplot() + \n      geom_point(aes(x = iris[, input$x], y = iris[, input$y], size = 1), color = \"#6f22b6\") + \n      theme_bw() + \n      theme(legend.position = 'none') +\n      labs(x = paste(input$x), y = paste(input$y), title = paste0(\"Plotting \", input$x, \" by \", input$y))\n  })\n}\nshinyApp(ui = ui, server = server)\n\n\n# Observe vs Reactive\n# \n# The main difference between observe and reactive is that observe does not return any values while reactive does. These are used to update output based on inputs “reactively”.\n\nui <- fluidPage(\n    titlePanel(\"My Shiny App\"),\n  sidebarLayout(\n      sidebarPanel(\n        selectInput(inputId = 'x', label = \"X Variable\", choices = names(iris)),\n        radioButtons(inputId = 'y', label = \"Y Variable\", choices = names(iris), inline = FALSE)\n      ),\n      mainPanel(\n        plotOutput(outputId = 'plot')\n      )\n    )\n  )\nserver = function(input, output, session) {\n  observe({\n    updateRadioButtons(session, 'y', choices = names(iris)[!names(iris) %in% input$x])\n  })\n  \n  dat <- reactive({\n    return(data.frame(x = iris[, input$x], y = iris[, input$y]))\n  })\n  \n  output$plot <- renderPlot({\n    ggplot(dat()) + \n      geom_point(aes(x = x, y = y, size = 1), color = \"#6f22b6\") + \n      theme_bw() + \n      theme(legend.position = 'none') +\n      labs(x = paste(input$x), y = paste(input$y), title = paste0(\"Plotting \", input$x, \" by \", input$y))\n  })\n}\nshinyApp(ui = ui, server = server)\n\n\n\nui <- fluidPage(\n    titlePanel(\"My Shiny App\"),\n  sidebarLayout(\n      sidebarPanel(\n        selectInput(inputId = 'x', label = \"X Variable\", choices = names(iris)),\n        radioButtons(inputId = 'y', label = \"Y Variable\", choices = names(iris), inline = FALSE), \n        tags$hr()\n        ,actionButton(inputId = 'action', label = \"Update Plot\")\n      ),\n      mainPanel(\n        plotOutput(outputId = 'plot')\n      )\n    )\n  )\nserver = function(input, output, session) {\n  rv <- reactiveValues(p = NULL)\n  \n  observe({\n    updateRadioButtons(session, 'y', choices = names(iris)[!names(iris) %in% input$x])\n  })\n  \n  dat <- reactive({\n    return(data.frame(x = iris[, input$x], y = iris[, input$y]))\n  })\n  \n  output$plot <- renderPlot({\n    rv$p\n  })\n  \n  observeEvent(input$action, {\n    rv$p <- ggplot(dat()) + \n      geom_point(aes(x = x, y = y, size = 1), color = \"#6f22b6\") + \n      theme_bw() + \n      theme(legend.position = 'none') +\n      labs(x = paste(input$x), y = paste(input$y), title = paste0(\"Plotting \", input$x, \" by \", input$y))\n  })\n}\nshinyApp(ui = ui, server = server)\n\n\n```\n\n<https://ky-kimeng.netlify.com/posts/intro-to-data-table/>\n<https://kkimeng.shinyapps.io/IntroToShiny/>\n<https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/>\n\n##ggplot \n\n* ggplot is used only for creating a plotting object you can specifiy data and x, y points in case you want to keep i fix \n* geom_point is used when you want scatter plot - aes(x,y)\n* geom_density is used for density plot, you can use fill to define teh variable with which the density will be plot-- aplha denote the darkness level of color of the filled density \n* facet_grid is used to break the data into multiple categories , it works on a ggplot object \n  + facet_grid() - rows =x/(x~.), cols=y/(.~y), (x,y)/(x~y) breaks the data\n    + for multiple variable (x+y~z) - rows will be combination of x and y and col will be z\n  + different color can be choosen by  colour = factor(cyl)\n  + for free scales across all buckets of variable scales = \"free\"\n  + for free space between categories space = \"free\"\n  + for right hand side naming angle with 0 - \"theme(strip.text.y = element_text(angle = 0))\"\n  + Margin attribute can be used to define if all or selected combination is required\n  \n  \n  \n```{r, echo = F}\nlibrary(ggplot2)\nlibrary(scales)\ndata <- data.table(status = c(\"Qualified\", \t\"Attempted\"\t,\"contacted\",\t\"Engaged\", \t\"Scheduled\"),\n                mbrs = c(290140,\t213877,\t100738,\t77097,\t43000))\n\n\nggplot(data, aes(x = status)) + \n  geom_bar(aes(y=mbrs,fill = status), stat = \"identity\") + \n  theme(legend.position = \"none\", \n        axis.text.y = element_blank()) + \n  scale_y_continuous(label = unit_format(unit = \"K\", 1e-3)) + \n  scale_x_discrete(limits = data[order(mbrs,decreasing = T)][,status]) + \n  labs(y=\"\",x=\"\") + \n  geom_label(aes(x=status,y=mbrs, label = paste0(round(mbrs/1000,0),\"K\")), \n                 position = position_dodge(width = 0.1)) + \n  geom_line(aes(y=mbrs, group = 1), stat = \"identity\", linetype = \"dashed\") \n```\n\n\n#Multiple branch in Git\n\n* Create the branch on your local machine and switch in this branch :\n`$ git checkout -b [name_of_your_new_branch]`\n* Change working branch :\n**$ git checkout [name_of_your_new_branch]**\n* Push the branch on github :\n`$ git push origin [name_of_your_new_branch]` or \n* When you want to commit something in your branch, be sure to be in your branch. Add -u parameter to set upstream.\n$$ git push --set-upstream origin remote$\n* You can see all branches created by using :\n*$ git branch*\n\n<https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches>\n\n\n\n```{r collapse}\n# If x and y are both vectors with 3 items in them, using “sep” will result in a vector of 3 items, but using “collapse” will result in a vector of one, so just a character string. \n\nx <- t(c(\"a\", \"b\", \"c\", \"d\"))\ny <- t(c(\"w\", \"x\", \"y\", \"z\"))\n\npaste(x, y, sep=\"%%\")\npaste(x, y, collapse=\"%%\")\npaste(x, y, collapse=\"%%\", sep =\",\")\npaste(x, y, sep =\"%%\", collapse =\",\")\npaste(x,collapse = \"|\")\n\n```\n\n\n```{r do.call}\n#do.call(cbind, dt_list) where dt_list is a list of data.table(s) with the same number of rows. do.call() applies cbind to every data.table in the list together, so you get a combined data.table as a result. Because cbind() only takes two data.frames or data.tables at a time, do.call() allows us to only have to call it once. do.call works almost with any function, not just cbind. It can be very useful. \n\n\nX <- list(1:3,4:6,7:9)\ncbind(X[[1]],X[[2]],X[[3]])\ndo.call(cbind,X)\nsum( X[[1]], X[[2]],X[[3]])\ndo.call(sum,X)\n\n```\n\n\n```{r grepl}\n#returns the Boolean value (True or False) of the matched string\n#1. etacharacters\ndt <- c(\"percent%\",\"percent\") \ngrep(pattern = \"percent\\\\%\",x = dt,value = T) \n\n\n#detect all strings \ndt <- c(\"may?\",\"money$\",\"and&\") \ngrep(pattern = \"[a-z][\\\\?-\\\\$-\\\\&]\",x = dt,value = T) \n\n\ngsub(pattern = \"[\\\\?-\\\\$-\\\\&]\",replacement = \"\",x = dt) \n\n\n# In fact, if you find a double backslash in a string, you'll need to prefix it with another double backslash to get detected. Following is an example:\n\ngsub(pattern = \"\\\\\\\\\",replacement = \"-\",x = \"Barcelona\\\\Spain\") \n\nnumber <- \"101000000000100\" \n#greedy - It says that for a particular pattern to be matched, it will try to match the pattern as many times as its repetition are available.\nregmatches(number, gregexpr(pattern = \"1.*1\",text = number)) \n\n#non greedy -Being non-greedy, for a particular pattern to be matched, it will stop at the first match.\nregmatches(number, gregexpr(pattern = \"1.?1\",text = number)) \n\nnames <- c(\"anna\",\"crissy\",\"puerto\",\"cristian\",\"garcia\",\"steven\",\"alex\",\"rudy\") \n\n#doesn't matter if e is a match \ngrep(pattern = \"e*\",x = names,value = T)\n\n#must match t one or more times \ngrep(pattern = \"t+\",x = names,value = T)\n\n#must match n two times\ngrep(pattern = \"n{2}\",x = names,value = T)\n\n#2. Sequences\nstring <- \"I have been to Paris 20 times\" \n\n#match a digit \ngsub(pattern = \"\\\\d+\",replacement = \"_\",x = string) \nregmatches(string,regexpr(pattern = \"\\\\d+\",text = string)) \n\n#match a non-digit \ngsub(pattern = \"\\\\D+\",replacement = \"_\",x = string) \nregmatches(string,regexpr(pattern = \"\\\\D+\",text = string)) \n\n#match a space - returns positions \ngregexpr(pattern = \"\\\\s+\",text = string) \n\n#match a non space \ngsub(pattern = \"\\\\S+\",replacement = \"app\",x = string) \n\n#match a word character \ngsub(pattern = \"\\\\w\",replacement = \"k\",x = string) \n\n#match a non-word character \ngsub(pattern = \"\\\\W\",replacement = \"k\",x = string)  \n\n\nstring <- \"20 people got killed in the mob attack. 14 got severely injured\" \n\n#extract numbers \nregmatches(x = string,gregexpr(\"[0-9]+\",text = string)) \n\n#extract without digits \nregmatches(x = string,gregexpr(\"[^0-9]+\",text = string))  \n\nstring <- c(\"I sleep 16 hours\\n, a day\",\"I sleep 8 hours\\n a day.\",\"You sleep how many\\t hours ?\")\n\n#get digits \nunlist(regmatches(string,gregexpr(\"[[:digit:]]+\",text = string))) \n\n#remove punctuations \ngsub(pattern = \"[[:punct:]]+\",replacement = \"\",x = string) \n\n#remove spaces \ngsub(pattern = \"[[:blank:]]\",replacement = \"-\",x = string) \n\n#remove control characters \ngsub(pattern = \"[[:cntrl:]]+\",replacement = \" \",x = string) \n\n#remove non graphical characters \ngsub(pattern = \"[^[:graph:]]+\",replacement = \"\",x = string) \n\n```\n\n\n<https://www.hackerearth.com/practice/machine-learning/advanced-techniques/regular-expressions-string-manipulation-r/tutorial/>\n<http://www.endmemo.com/program/R/grepl.php>\n",
    "created" : 1562416194565.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1136245604",
    "id" : "EFA5D3A",
    "lastKnownWriteTime" : 1562416246,
    "last_content_update" : 1562451116476,
    "path" : "~/Desktop/Project/HassleFree/Provider Rating/AR1367-CAHPS-provider-impact/Rpractice.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}